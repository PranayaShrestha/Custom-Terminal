def do_mkdir(self, arg: str) -> None:
    """Creates a new directory."""
    new_dir = Path.cwd() / arg
    try:
        new_dir.mkdir(exist_ok=True)
        print(f"Directory '{arg}' created successfully.")
    except Exception as e:
        print(f"Error: {e}")

def do_ls(self, arg: str) -> None:
    """Lists files and directories in the current or specified directory."""
    directory = Path.cwd() if not arg else Path(arg)
    if directory.exists() and directory.is_dir():
        for item in sorted(directory.iterdir()):
            if item.is_dir():
                print(f"{item.name}/")
            else:
                print(item.name)
    else:
        print(f"Directory '{arg}' not found.")

def do_cd(self, arg: str) -> None:
    """Changes the current working directory."""
    try:
        os.chdir(arg)
        print(f"Current working directory changed to '{os.getcwd()}'")
    except FileNotFoundError:
        print(f"Directory '{arg}' not found.")
    except Exception as e:
        print(f"Error: {e}")

def do_copy(self, arg: str) -> None:
    """Copies a file from one location to another."""
    args = arg.split()
    if len(args) != 2:
        print("Usage: copy <source_file> <destination_file>")
        return

    source, destination = args
    source_path = Path(source)
    destination_path = Path(destination)

    if source_path.exists():
        try:
            shutil.copy(source_path, destination_path)
            print(f"File '{source}' copied to '{destination}'")
        except Exception as e:
            print(f"Error: {e}")
    else:
        print(f"Source file '{source}' not found.")

def do_move(self, arg: str) -> None:
    """Moves a file or directory from one location to another."""
    args = arg.split()
    if len(args) != 2:
        print("Usage: move <source> <destination>")
        return

    source, destination = args
    source_path = Path(source)
    destination_path = Path(destination)

    if source_path.exists():
        try:
            shutil.move(source_path, destination_path)
            print(f"'{source}' moved to '{destination}'")
        except Exception as e:
            print(f"Error: {e}")
    else:
        print(f"Source '{source}' not found.")

def do_shell(self, arg: str) -> None:
    """Runs a command in the system shell."""
    try:
        subprocess.run(arg, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Command returned non-zero exit status: {e.returncode}")
    except Exception as e:
        print(f"Error: {e}")
